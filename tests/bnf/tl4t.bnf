/**
    Toy Language 4 Typing
**/

source =
[   
    @ignore("C/C++")
    [
        [stmt:s #new_rootstmt(_, s)]+
        eof
    ]
]

stmt =
[
    [decl_var | decl_fun | expr]:>_
]

decl_var =
[
    __scope__:e
    "var" name:n ':' type:t [';' | '=' expr:>e ]? #new_declvar(_, n, t, e)
]

decl_fun =
[
    "fun" name:n params:p ':' type:t implem:b #new_declfun(_, n, t, p, b)
]

params =
[
    '(' [
            param:p #add_param(_, p)
            [',' param:p #add_param(_, p) ]*
            [',' '...' #add_param_variadic(_) ]?
        | '...' #add_param_variadic(_)
        ]?
    ')'
]

param =
[
    name:n ':' type:t #new_param(_, n, t)
]

implem =
[
    ';' /* just a prototype */
    | block:>_
]

name = [ id ]

type = [ id ]

block =
[
    '{' [stmt:s #new_stmt(_, s) ]+ '}'
]

expr = [ assignement_expression:e ';' #new_expr_stmt(_, e) ]

assign_op = [
    @ignore('null')
    [
        [
            '=' !'='
            | "+="
            | "-="
            | "*="
            | "/="
            | "%="
            | "<<="
            | ">>="
            | "&="
            | "^="
            | "|="
        ]:op
        #new_operator(_, op)
    ]
]
assignement_expression =
[
    or_expression:>_
    [
        assign_op:op
        assignement_expression:param
        #new_binary(_, op, param)
    ]*
]

or_op = [ @ignore('null') [["|" !["|"|"="]]:op #new_operator(_, op)] ]
or_expression =
[
    xor_expression:>_
    [   
        or_op:op
        xor_expression:param
        #new_binary(_, op, param)
    ]*
]

xor_op = [ @ignore('null') [ ["^" !"="]:op #new_operator(_, op) ] ]
xor_expression =
[
    and_expression:>_
    [   
        xor_op:op
        and_expression:param
        #new_binary(_, op, param)
    ]*
]

and_op = [ @ignore('null') [ ["&" !["&"|"="]]:op #new_operator(_, op) ] ]
and_expression =
[
    equality_expression:>_
    [   
        and_op:op
        equality_expression:param
        #new_binary(_, op, param)
    ]*
]

eqneq_op = [ @ignore('null') [ ["==" | "!="]:op #new_operator(_, op) ] ]
equality_expression =
[
    relational_expression:>_
    [   
        eqneq_op:op
        relational_expression:param
        #new_binary(_, op, param)
    ]*
]

cmp_op = [
    @ignore('null')
    [
        "<="
        | ">="
        | '<' !'<'
        | '>' !'>'
    ]:op
    #new_operator(_, op)
]
relational_expression =
[
    shift_expression:>_
    [   
        cmp_op:op
        shift_expression:param
        #new_binary(_, op, param)
    ]*
]

shift_op = [ @ignore('null') ["<<" !"=" | ">>" !"="]:op #new_operator(_, op) ]
shift_expression =
[
    additive_expression:>_
    [   
        shift_op:op
        additive_expression:param
        #new_binary(_, op, param)
    ]*
]

add_op = [
    @ignore('null')
    [
        '+' !['+'|'=']
        | '-' !['-'|'='|'>']
    ]:op
    #new_operator(_, op)
]
additive_expression =
[
    multiplicative_expression:>_
    [   
        add_op:op
        multiplicative_expression:param
        #new_binary(_, op, param)
    ]*
]

mul_op = [ @ignore('null') [['*'|'/'|'%']:op !'='] #new_operator(_, op) ]
multiplicative_expression =
[
    unary_expression:>_
    [   
        mul_op:op
        unary_expression:param
        #new_binary(_, op, param)
    ]*
]

unary_op =
[
    @ignore('null') 
    [
     '~' !'='
    | '!' !'='
    | '+' !'='
    | '-' !['>'|'=']
    ]:op #new_operator(_, op)
]
unary_expression =
[
    postfix_expression:>_
    |
        __scope__:op
        [   unary_op:>op
        |   Base.id:i
            #new_operator(op, i)
        ]
        unary_expression:expr
        #new_unary(_, op, expr)
]

postfix_expression =
[
    primary_expression:>_
    [
        __scope__:pexp
        [
/*        '[' expression:expr ']' #new_array_call(e, e, expr) */
         '(' func_arg_list?:args ')' #new_func_call(pexp, _, args)
/*
        | '.' identifier:i #new_dot(_, _, i)
        | "->" identifier:i #new_arrow(_, _, i)
        | ["++"|"--"]:op #new_operator(op, op) #new_post(_, op, _)
*/
        ]
        #bind('_', pexp)
    ]*
]

func_arg_list =
[
    assignement_expression:a #new_arg(_, a)
    [
        ','
        assignement_expression:a #new_arg(_, a)
    ]*
]

primary_expression =
[
    '(' or_expression:expr ')' #new_paren(_, expr)
    |[ literal | identifier]:>_
]

identifier =
[
    @ignore('null') 
    [
        rootidentifier:id
/*        #check_is_id(id) */
        #new_id(_, id)
    ]
]

rootidentifier = [ Base.id:>_ ]

dot = [ '.' !'.' ]

pow = [ 'p' | 'P' ]

exp = [ ['e'|'E'] ['+'|'-']? ['0'..'9']+ ]

unsigned_suffix = [ 'u' | 'U' ]

long_suffix = [ 'l' | 'L' ]

float_suffix = [ 'f' | 'F' ]

complex_suffix = [ 'i' | 'I' | 'j' | 'J' ]

decimal_const =
[
    ['0'..'9']+
    unsigned_suffix?
    long_suffix?
    long_suffix?
]

hexadecimal_prefix = [ '0' ['x'|'X'] ]

hexadecimal_digit = [ '0'..'9' | 'a'..'f' | 'A'..'F' ]

hexadecimal_const_int =
[
    hexadecimal_prefix [hexadecimal_digit]+
    unsigned_suffix?
    long_suffix?
    long_suffix?
]

octal_digit = [ '0'..'7' ]

octal_const = 
[
    '0' octal_digit+
    [
       dot octal_digit+
       [pow ['+'|'-']? decimal_const]?
    ]?
]

double_const =
[
    [decimal_const dot ['0'..'9']*| dot ['0'..'9']+] exp?
    long_suffix?
    float_suffix?
    complex_suffix?
]

encoding_prefix = [ "u8" | 'u' | 'U' | 'L' ]

string_const = [ encoding_prefix? Base.string @ignore("C/C++") Base.string* ]

char_const = [ encoding_prefix? Base.char ]

literal =
[
    @ignore('null')
    [
    __scope__:t
    [
        hexadecimal_const_int #set(t, "int")
        | octal_const #set(t, "int")
        | double_const #set(t, "double")
        | decimal_const #set(t, "int")
        | string_const #set(t, "string")
        | char_const #set(t, "char")
    ]:val
    #new_literal(_, val, t)
    ]
]
